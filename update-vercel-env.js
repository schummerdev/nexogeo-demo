#!/usr/bin/env node

/**
 * Script para atualizar vari√°veis de ambiente na Vercel
 * Uso: node update-vercel-env.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Cores
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  blue: '\x1b[34m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function execCommand(command, description) {
  log(`\n‚è≥ ${description}...`, 'yellow');
  try {
    const output = execSync(command, {
      encoding: 'utf-8',
      stdio: 'pipe'
    });
    log(`‚úÖ ${description} - Conclu√≠do`, 'green');
    return output;
  } catch (error) {
    log(`‚ùå ${description} - Erro: ${error.message}`, 'red');
    return null;
  }
}

async function updateVercelEnv() {
  log('\n' + '='.repeat(70), 'blue');
  log('üîß ATUALIZA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE - VERCEL', 'blue');
  log('='.repeat(70), 'blue');

  // Ler .env
  const envPath = path.join(__dirname, '.env');
  if (!fs.existsSync(envPath)) {
    log('\n‚ùå ERRO: Arquivo .env n√£o encontrado!', 'red');
    process.exit(1);
  }

  log('\nüìÑ Lendo arquivo .env...', 'cyan');
  const envContent = fs.readFileSync(envPath, 'utf-8');
  const envVars = {};

  // Parse .env
  envContent.split('\n').forEach(line => {
    line = line.trim();
    if (line && !line.startsWith('#')) {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        envVars[key.trim()] = valueParts.join('=').trim();
      }
    }
  });

  log(`‚úÖ ${Object.keys(envVars).length} vari√°veis encontradas no .env`, 'green');

  // Vari√°veis cr√≠ticas que devem ser atualizadas
  const criticalVars = [
    'DATABASE_URL',
    'DATABASE_URL_UNPOOLED',
    'POSTGRES_URL',
    'POSTGRES_URL_NON_POOLING',
    'POSTGRES_PRISMA_URL',
    'PGHOST',
    'PGHOST_UNPOOLED',
    'PGUSER',
    'PGDATABASE',
    'PGPASSWORD',
    'POSTGRES_USER',
    'POSTGRES_HOST',
    'POSTGRES_PASSWORD',
    'POSTGRES_DATABASE',
    'JWT_SECRET',
    'GOOGLE_API_KEY',
    'NODE_ENV'
  ];

  // Vari√°veis que existem no .env e s√£o cr√≠ticas
  const varsToUpdate = criticalVars.filter(key => envVars[key]);

  log('\nüìã Vari√°veis a serem atualizadas:', 'cyan');
  varsToUpdate.forEach(key => {
    const value = envVars[key];
    const masked = value.includes('postgresql')
      ? value.replace(/:[^:@]+@/, ':****@')
      : value.length > 20
        ? value.substring(0, 10) + '...' + value.substring(value.length - 10)
        : value;
    log(`   ‚Ä¢ ${key} = ${masked}`, 'cyan');
  });

  log('\n' + '='.repeat(70), 'yellow');
  log('‚ö†Ô∏è  ATEN√á√ÉO: Este processo ir√°:', 'yellow');
  log('   1. Remover vari√°veis antigas (se existirem)', 'yellow');
  log('   2. Adicionar novas vari√°veis', 'yellow');
  log('   3. Aplicar em Production, Preview e Development', 'yellow');
  log('='.repeat(70), 'yellow');

  // Processar cada vari√°vel
  let successCount = 0;
  let errorCount = 0;

  for (const key of varsToUpdate) {
    const value = envVars[key];

    log(`\nüìù Processando: ${key}`, 'blue');

    // Tentar remover vari√°vel antiga (ignorar erros)
    log(`   üóëÔ∏è  Removendo vers√£o antiga (se existir)...`, 'yellow');
    try {
      execSync(`vercel env rm ${key} production --yes`, { stdio: 'pipe' });
      execSync(`vercel env rm ${key} preview --yes`, { stdio: 'pipe' });
      execSync(`vercel env rm ${key} development --yes`, { stdio: 'pipe' });
    } catch (e) {
      // Ignorar erro se n√£o existir
    }

    // Adicionar nova vari√°vel
    const tempFile = path.join(__dirname, `.temp_env_${key}`);
    fs.writeFileSync(tempFile, value);

    try {
      // Production
      execSync(`vercel env add ${key} production < "${tempFile}"`, { stdio: 'pipe' });
      log(`   ‚úÖ Adicionada em Production`, 'green');

      // Preview
      execSync(`vercel env add ${key} preview < "${tempFile}"`, { stdio: 'pipe' });
      log(`   ‚úÖ Adicionada em Preview`, 'green');

      // Development
      execSync(`vercel env add ${key} development < "${tempFile}"`, { stdio: 'pipe' });
      log(`   ‚úÖ Adicionada em Development`, 'green');

      successCount++;
    } catch (error) {
      log(`   ‚ùå Erro ao adicionar vari√°vel: ${error.message}`, 'red');
      errorCount++;
    } finally {
      // Remover arquivo tempor√°rio
      if (fs.existsSync(tempFile)) {
        fs.unlinkSync(tempFile);
      }
    }
  }

  // Resumo
  log('\n' + '='.repeat(70), 'green');
  log('üìä RESUMO DA ATUALIZA√á√ÉO', 'green');
  log('='.repeat(70), 'green');
  log(`\n‚úÖ Vari√°veis atualizadas com sucesso: ${successCount}`, 'green');
  if (errorCount > 0) {
    log(`‚ùå Vari√°veis com erro: ${errorCount}`, 'red');
  }

  // Sugerir redeploy
  log('\n' + '='.repeat(70), 'yellow');
  log('üöÄ PR√ìXIMO PASSO: REDEPLOY', 'yellow');
  log('='.repeat(70), 'yellow');
  log('\nExecute um dos comandos:', 'cyan');
  log('   vercel --prod                    # Deploy completo', 'cyan');
  log('   vercel redeploy --prod           # Redeploy r√°pido', 'cyan');
  log('\nOu aguarde o deploy autom√°tico pelo GitHub push.', 'cyan');

  log('');
}

// Executar
updateVercelEnv().catch(error => {
  log(`\n‚ùå Erro fatal: ${error.message}`, 'red');
  console.error(error);
  process.exit(1);
});
