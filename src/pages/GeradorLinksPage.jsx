import React, { useState, useEffect } from 'react';
import Header from '../components/DashboardLayout/Header';
import './DashboardPages.css';
import { fetchPromocoes } from '../services/promocaoService';
import { useToast } from '../contexts/ToastContext';

const GeradorLinksPage = () => {
  const { showToast } = useToast();
  const [linkData, setLinkData] = useState({
    promocaoId: '',
    utmSource: '',
    utmMedium: ''
  });
  
  const [generatedLink, setGeneratedLink] = useState('');
  const [generatedLinks, setGeneratedLinks] = useState([]);
  const [promotions, setPromotions] = useState([]);
  const [emissora, setEmissora] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fun√ß√£o para obter √≠cone da rede social
  const getSocialIcon = (socialNetwork) => {
    const icons = {
      'Facebook': 'üìò',
      'Instagram': 'üì∑',
      'YouTube': 'üì∫',
      'WhatsApp': 'üí¨',
      'Website': 'üåê',
      'TV': 'üìª',
      'Manual': '‚úã'
    };
    return icons[socialNetwork] || 'üîó';
  };

  // Buscar promo√ß√µes ao carregar o componente
  useEffect(() => {
    const loadPromotions = async () => {
      try {
        setLoading(true);
        const data = await fetchPromocoes();
        setPromotions(data);
      } catch (err) {
        setError('Falha ao carregar promo√ß√µes');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    loadPromotions();
    
    // Fun√ß√£o para carregar dados da emissora
    const loadEmissora = async () => {
      try {
        const response = await fetch('/api/configuracoes?type=emissora');
        if (response.ok) {
          const data = await response.json();
          setEmissora(data.data);
        }
      } catch (error) {
        console.error('Erro ao carregar emissora:', error);
      }
    };
    
    loadEmissora();
    
    // Carregar links salvos do localStorage
    const savedLinks = localStorage.getItem('generatedLinks');
    if (savedLinks) {
      try {
        setGeneratedLinks(JSON.parse(savedLinks));
      } catch (error) {
        console.error('Erro ao carregar links salvos:', error);
      }
    }
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setLinkData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Auto-gerar links quando uma promo√ß√£o for selecionada
    if (name === 'promocaoId' && value && emissora) {
      autoGenerateLinksForSocialNetworks(value);
    }
  };
  
  // Auto-gerar links para redes sociais da emissora
  const autoGenerateLinksForSocialNetworks = (promocaoId) => {
    if (!emissora || !promocaoId) return;
    
    const socialNetworks = [
      { name: 'Facebook', key: 'facebook', utmSource: 'facebook', utmMedium: 'social' },
      { name: 'Instagram', key: 'instagram', utmSource: 'instagram', utmMedium: 'social' },
      { name: 'YouTube', key: 'youtube', utmSource: 'youtube', utmMedium: 'video' },
      { name: 'WhatsApp', key: 'whatsapp', utmSource: 'whatsapp', utmMedium: 'messaging' },
      { name: 'Website', key: 'website', utmSource: 'website', utmMedium: 'referral' },
      { name: 'TV', key: 'tv', utmSource: 'tv', utmMedium: 'broadcast' }
    ];
    
    const selectedPromotion = promotions.find(p => p.id == promocaoId);
    if (!selectedPromotion) return;
    
    const newLinks = [];
    const baseUrl = window.location.origin + '/participar';
    
    socialNetworks.forEach(social => {
      // S√≥ gerar link se a emissora tiver essa rede social preenchida
      // EXCE√á√ÉO: TV sempre √© gerada independentemente dos dados da emissora
      if ((emissora[social.key] && emissora[social.key].trim()) || social.key === 'tv') {
        const params = new URLSearchParams();
        params.append('id', promocaoId);
        params.append('utm_source', social.utmSource);
        params.append('utm_medium', social.utmMedium);
        
        const fullLink = `${baseUrl}?${params.toString()}`;
        
        const newLink = {
          id: Date.now() + Math.random(), // ID √∫nico
          link: fullLink,
          promocao: selectedPromotion.nome,
          utmSource: social.utmSource,
          utmMedium: social.utmMedium,
          socialNetwork: social.name,
          data: new Date().toLocaleString('pt-BR'),
          autoGenerated: true
        };
        
        newLinks.push(newLink);
      }
    });

    if (newLinks.length > 0) {
      // Verificar se j√° existem links para essa promo√ß√£o
      const existingLinks = generatedLinks.filter(link =>
        link.promocao === selectedPromotion.nome && link.autoGenerated
      );

      // Se n√£o existem links auto-gerados para essa promo√ß√£o, adicionar
      if (existingLinks.length === 0) {
        const updatedLinks = [...newLinks, ...generatedLinks];
        setGeneratedLinks(updatedLinks);
        
        // Salvar no localStorage
        try {
          localStorage.setItem('generatedLinks', JSON.stringify(updatedLinks));
        } catch (error) {
          console.error('Erro ao salvar links:', error);
        }
        
        showToast(`${newLinks.length} links gerados automaticamente para redes sociais!`, 'success');
      }
    }
  };
  
  // Filtrar links por promo√ß√£o selecionada
  const getFilteredLinks = () => {
    if (!linkData.promocaoId) return generatedLinks;
    
    const selectedPromotion = promotions.find(p => p.id == linkData.promocaoId);
    if (!selectedPromotion) return generatedLinks;
    
    return generatedLinks.filter(link => 
      link.promocao === selectedPromotion.nome
    );
  };
  
  const handleGenerateLink = (e) => {
    e.preventDefault();
    
    // Valida√ß√£o simples
    if (!linkData.promocaoId) {
      showToast('Por favor, selecione uma promo√ß√£o.', 'warning');
      return;
    }
    
    // Encontrar a promo√ß√£o selecionada
    const selectedPromotion = promotions.find(p => p.id == linkData.promocaoId);
    if (!selectedPromotion) {
      showToast('Promo√ß√£o n√£o encontrada.', 'error');
      return;
    }
    
    // Construir o link usando ID (padr√£o preferido)
    const baseUrl = window.location.origin + '/participar';
    const params = new URLSearchParams();
    
    // Sempre usar ID em vez de slug
    params.append('id', linkData.promocaoId);
    
    if (linkData.utmSource) {
      params.append('utm_source', linkData.utmSource);
    }
    
    if (linkData.utmMedium) {
      params.append('utm_medium', linkData.utmMedium);
    }
    
    const fullLink = `${baseUrl}?${params.toString()}`;
    setGeneratedLink(fullLink);
    
    // Adicionar √† lista de links gerados
    const newLink = {
      id: Date.now(),
      link: fullLink,
      promocao: selectedPromotion.nome,
      utmSource: linkData.utmSource || 'N/A',
      utmMedium: linkData.utmMedium || 'N/A',
      data: new Date().toLocaleString('pt-BR')
    };
    
    const updatedLinks = [newLink, ...generatedLinks];
    setGeneratedLinks(updatedLinks);
    
    // Salvar no localStorage
    try {
      localStorage.setItem('generatedLinks', JSON.stringify(updatedLinks));
    } catch (error) {
      console.error('Erro ao salvar links:', error);
    }
    
    showToast('Link gerado com sucesso!', 'success');
  };

  // Fun√ß√£o para gerar links gen√©ricos (sem c√≥digo de promo√ß√£o)
  const handleGenerateGenericLinks = () => {
    if (!linkData.utmSource && !linkData.utmMedium) {
      showToast('Por favor, preencha pelo menos a origem (utm_source) ou m√≠dia (utm_medium).', 'warning');
      return;
    }

    const baseUrl = window.location.origin + '/participar';
    const params = new URLSearchParams();
    
    if (linkData.utmSource) {
      params.append('utm_source', linkData.utmSource);
    }
    
    if (linkData.utmMedium) {
      params.append('utm_medium', linkData.utmMedium);
    }
    
    const genericLink = `${baseUrl}${params.toString() ? `?${params.toString()}` : ''}`;
    
    const newLink = {
      id: Date.now() + Math.random(),
      link: genericLink,
      promocao: 'Link Gen√©rico (Usu√°rio escolhe promo√ß√£o)',
      utmSource: linkData.utmSource || '',
      utmMedium: linkData.utmMedium || '',
      socialNetwork: 'Manual',
      data: new Date().toLocaleString('pt-BR'),
      autoGenerated: false,
      isGeneric: true
    };
    
    const updatedLinks = [newLink, ...generatedLinks];
    setGeneratedLinks(updatedLinks);
    
    try {
      localStorage.setItem('generatedLinks', JSON.stringify(updatedLinks));
    } catch (error) {
      console.error('Erro ao salvar links:', error);
    }
    
    showToast('Link gen√©rico gerado! O usu√°rio poder√° escolher a promo√ß√£o na p√°gina de cadastro.', 'success');
    setGeneratedLink(genericLink);
  };

  // Fun√ß√£o para gerar links gen√©ricos das redes sociais
  const handleGenerateGenericSocialLinks = () => {
    const baseUrl = window.location.origin + '/participar';
    const newLinks = [];
    
    // Redes sociais padr√£o com suas configura√ß√µes
    const socialNetworks = [
      { name: 'Facebook', utmSource: 'facebook', utmMedium: 'social' },
      { name: 'Instagram', utmSource: 'instagram', utmMedium: 'social' },
      { name: 'YouTube', utmSource: 'youtube', utmMedium: 'social' },
      { name: 'WhatsApp', utmSource: 'whatsapp', utmMedium: 'social' },
      { name: 'TV', utmSource: 'tv', utmMedium: 'broadcast' }
    ];

    socialNetworks.forEach(social => {
      const params = new URLSearchParams();
      params.append('utm_source', social.utmSource);
      params.append('utm_medium', social.utmMedium);
      
      const genericLink = `${baseUrl}?${params.toString()}`;
      
      const newLink = {
        id: Date.now() + Math.random(),
        link: genericLink,
        promocao: 'Link Gen√©rico (Usu√°rio escolhe promo√ß√£o)',
        utmSource: social.utmSource,
        utmMedium: social.utmMedium,
        socialNetwork: social.name,
        data: new Date().toLocaleString('pt-BR'),
        autoGenerated: true
      };
      
      newLinks.push(newLink);
    });

    // Adicionar os novos links √† lista existente
    const updatedLinks = [...newLinks, ...generatedLinks];
    setGeneratedLinks(updatedLinks);
    
    try {
      localStorage.setItem('generatedLinks', JSON.stringify(updatedLinks));
    } catch (error) {
      console.error('Erro ao salvar links:', error);
    }
    
    showToast(`${newLinks.length} links gen√©ricos das redes sociais gerados com sucesso!`, 'success');
  };
  
  const handleCopyLink = (link) => {
    navigator.clipboard.writeText(link);
    showToast('Link copiado para a √°rea de transfer√™ncia!', 'success');
  };

  const handleDeleteLink = (linkId) => {
    if (window.confirm('Tem certeza que deseja excluir este link?')) {
      const updatedLinks = generatedLinks.filter(link => link.id !== linkId);
      setGeneratedLinks(updatedLinks);
      
      // Atualizar localStorage
      try {
        localStorage.setItem('generatedLinks', JSON.stringify(updatedLinks));
      } catch (error) {
        console.error('Erro ao salvar links:', error);
      }
      
      showToast('Link exclu√≠do com sucesso!', 'success');
    }
  };
  
  const handleGenerateQRCode = (link) => {
    // Usar API gratuita do QR Server
    const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(link)}`;
    
    // Abrir QR code em nova aba
    window.open(qrUrl, '_blank');
    showToast('QR Code gerado e aberto em nova aba!', 'success');
  };

  const handleShortenLink = async (originalLink) => {
    try {
      // Usar nossa API proxy para encurtar links
      const response = await fetch('/api/?route=encurtar-link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ url: originalLink })
      });
      
      const data = await response.json();
      
      if (response.ok && data.success) {
        // Copiar link encurtado para √°rea de transfer√™ncia
        await navigator.clipboard.writeText(data.shortUrl);

        // Mostrar qual servi√ßo foi usado
        const serviceInfo = data.service === 'is.gd' ? '‚úÖ SEM PROPAGANDA' :
                           data.service === 'tinyurl' ? '‚ö†Ô∏è PODE TER PROPAGANDA' :
                           'üîß LOCAL';

        showToast(`${serviceInfo} - Link copiado: ${data.shortUrl}`, 'success');
      } else {
        throw new Error(data.message || 'Falha ao encurtar link');
      }
    } catch (error) {
      console.error('Erro ao encurtar link:', error);
      showToast('Erro ao encurtar link. Tente novamente.', 'error');
    }
  };
  

  if (loading) {
    return (
      <>
        <Header 
          title="Gerador de Links de Participa√ß√£o" 
          subtitle="Crie links personalizados para suas promo√ß√µes"
        />
        <div className="gerador-links-content">
          <div className="loading-message">
            <p>Carregando promo√ß√µes...</p>
          </div>
        </div>
      </>
    );
  }

  if (error) {
    return (
      <>
        <Header 
          title="Gerador de Links de Participa√ß√£o" 
          subtitle="Crie links personalizados para suas promo√ß√µes"
        />
        <div className="gerador-links-content">
          <div className="error-message">
            <p>{error}</p>
            <button onClick={() => window.location.reload()}>Tentar novamente</button>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Header 
        title="Gerador de Links de Participa√ß√£o" 
        subtitle="Crie links personalizados para suas promo√ß√µes"
      />
      
      <div className="gerador-links-content">
        <div className="card">
          <h3 className="card-title">Configura√ß√µes do Link</h3>
          
          <form onSubmit={handleGenerateLink} className="link-form">
            <div className="form-group">
              <label htmlFor="promocaoId">Promo√ß√£o</label>
              <select
                id="promocaoId"
                name="promocaoId"
                value={linkData.promocaoId}
                onChange={handleInputChange}
                required
              >
                <option value="">Selecione uma promo√ß√£o</option>
                {promotions
                  .filter(promo => promo.status === 'ativa')
                  .map(promo => (
                    <option key={promo.id} value={promo.id}>{promo.nome}</option>
                  ))}
              </select>
            </div>
            
            <div className="form-group">
              <label htmlFor="utmSource">Origem (utm_source)</label>
              <input
                type="text"
                id="utmSource"
                name="utmSource"
                value={linkData.utmSource}
                onChange={handleInputChange}
                placeholder="Ex: facebook, whatsapp, email"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="utmMedium">M√≠dia (utm_medium)</label>
              <input
                type="text"
                id="utmMedium"
                name="utmMedium"
                value={linkData.utmMedium}
                onChange={handleInputChange}
                placeholder="Ex: social, banner, newsletter"
              />
            </div>
            
            <div className="form-group align-right">
              <button type="submit" className="btn-primary">
                <span className="btn-icon">üîó</span>
                Gerar Link
              </button>
              
              <button
                type="button"
                className="btn-secondary"
                onClick={handleGenerateGenericSocialLinks}
                style={{ marginLeft: '10px' }}
              >
                <span className="btn-icon">üîó</span>
                Links Redes Sociais (Gen√©ricos)
              </button>
            </div>
          </form>
        </div>
        
        {generatedLink && (
          <div className="card">
            <h3 className="card-title">Link Gerado</h3>
            <div className="generated-link-container">
              <div className="link-display">
                {generatedLink}
              </div>
              <div className="form-group align-right">
                <button 
                  onClick={() => handleCopyLink(generatedLink)} 
                  className="btn-secondary"
                >
                  <span className="btn-icon">üìã</span>
                  Copiar Link
                </button>
                <button 
                  onClick={() => handleShortenLink(generatedLink)} 
                  className="btn-secondary"
                  style={{ marginLeft: '10px' }}
                >
                  <span className="btn-icon">üîó</span>
                  Encurtar
                </button>
              </div>
            </div>
          </div>
        )}
        
        {getFilteredLinks().length > 0 && (
          <div className="card">
            <h3 className="card-title">
              {linkData.promocaoId ? 'Links da Promo√ß√£o Selecionada' : 'Links Gerados Recentemente'}
            </h3>
            
            <div className="table-container">
              <table className="participantes-table">
                <thead>
                  <tr>
                    <th>Link</th>
                    <th>A√ß√µes</th>
                  </tr>
                </thead>
                <tbody>
                  {getFilteredLinks().map(link => (
                    <tr key={link.id}>
                      <td>
                        <div className="link-cell">
                          <div className="link-url" title={link.link}>
                            {link.link.length > 50 ? link.link.substring(0, 50) + '...' : link.link}
                          </div>
                          <div className="link-info">
                            <small>
                              {link.socialNetwork && (
                                <span className="social-badge">
                                  {getSocialIcon(link.socialNetwork)} {link.socialNetwork} {link.autoGenerated && 'ü§ñ'}
                                </span>
                              )}
                              {link.socialNetwork && link.promocao && ' ‚Ä¢ '}
                              {link.promocao && `(${link.promocao}) - `}
                              {link.data}
                            </small>
                          </div>
                        </div>
                      </td>
                      <td>
                        <div className="action-buttons">
                          <button 
                            className="btn-icon-small"
                            onClick={() => handleCopyLink(link.link)}
                            title="Copiar Link"
                          >
                            <span className="icon">üìã</span>
                          </button>
                          <button 
                            className="btn-icon-small"
                            onClick={() => handleShortenLink(link.link)}
                            title="Encurtar Link"
                          >
                            <span className="icon">üîó</span>
                          </button>
                          <button 
                            className="btn-icon-small"
                            onClick={() => handleGenerateQRCode(link.link)}
                            title="Gerar QR Code"
                          >
                            <span className="icon">üì±</span>
                          </button>
                          <button 
                            className="btn-icon-small"
                            onClick={() => handleDeleteLink(link.id)}
                            title="Excluir"
                          >
                            <span className="icon">üóëÔ∏è</span>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default GeradorLinksPage;