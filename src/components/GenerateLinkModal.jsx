import React, { useState, useEffect } from 'react';
import { useToast } from '../contexts/ToastContext';
import './Modal.css';

const GenerateLinkModal = ({ isOpen, promocao, emissora, onClose }) => {
  const { showToast } = useToast();
  const [generatedLinks, setGeneratedLinks] = useState([]);

  // Carregar links salvos do localStorage ao abrir o modal
  useEffect(() => {
    if (isOpen && promocao) {
      const savedLinks = JSON.parse(localStorage.getItem('generatedLinks') || '[]');
      // Filtrar apenas os links da promoção atual
      const promocaoLinks = savedLinks.filter(link =>
        link.promocao === promocao.nome || link.promocaoId === promocao.id
      );
      setGeneratedLinks(promocaoLinks);
    }
  }, [isOpen, promocao]);

  // Auto-gerar links quando o modal abre
  useEffect(() => {
    if (isOpen && promocao && emissora && generatedLinks.length === 0) {
      autoGenerateLinksForSocialNetworks();
    }
  }, [isOpen, promocao, emissora]);

  const autoGenerateLinksForSocialNetworks = () => {
    if (!promocao || !emissora) return;

    const origin = window.location.origin;
    const socialNetworks = [
      { name: 'Facebook', key: 'facebook', utmSource: 'facebook', utmMedium: 'social' },
      { name: 'Instagram', key: 'instagram', utmSource: 'instagram', utmMedium: 'social' },
      { name: 'YouTube', key: 'youtube', utmSource: 'youtube', utmMedium: 'video' },
      { name: 'WhatsApp', key: 'whatsapp', utmSource: 'whatsapp', utmMedium: 'messaging' },
      { name: 'Website', key: 'website', utmSource: 'website', utmMedium: 'referral' },
      { name: 'TV', key: 'tv', utmSource: 'tv', utmMedium: 'broadcast' }
    ];

    const newLinks = [];
    socialNetworks.forEach(network => {
      // Verificar se a emissora tem essa rede social configurada
      const hasNetwork = emissora[network.key];

      if (hasNetwork || network.key === 'tv') { // TV sempre disponível
        const link = `${origin}/participar?id=${promocao.id}&utm_source=${network.utmSource}&utm_medium=${network.utmMedium}`;

        newLinks.push({
          id: Date.now() + Math.random(),
          link,
          promocao: promocao.nome,
          promocaoId: promocao.id,
          utmSource: network.utmSource,
          utmMedium: network.utmMedium,
          socialNetwork: network.name,
          data: new Date().toLocaleString('pt-BR'),
          autoGenerated: true
        });
      }
    });

    if (newLinks.length > 0) {
      setGeneratedLinks(newLinks);
      // Salvar no localStorage
      const savedLinks = JSON.parse(localStorage.getItem('generatedLinks') || '[]');
      const updatedLinks = [...savedLinks, ...newLinks];
      localStorage.setItem('generatedLinks', JSON.stringify(updatedLinks));
      showToast(`${newLinks.length} links gerados automaticamente!`, 'success');
    }
  };

  const handleCopyLink = (link) => {
    navigator.clipboard.writeText(link);
    showToast('Link copiado para a área de transferência!', 'success');
  };

  const handleGenerateQRCode = (link) => {
    const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(link)}`;
    window.open(qrUrl, '_blank');
    showToast('QR Code gerado e aberto em nova aba!', 'success');
  };

  const handleShortenLink = async (originalLink) => {
    try {
      showToast('Encurtando link...', 'info');

      const response = await fetch('/api/?route=encurtar-link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url: originalLink })
      });

      const data = await response.json();

      if (response.ok && data.success) {
        await navigator.clipboard.writeText(data.shortUrl);
        showToast(`Link encurtado copiado: ${data.shortUrl}`, 'success');
      } else {
        throw new Error(data.error || 'Falha ao encurtar link');
      }
    } catch (error) {
      showToast('Erro ao encurtar link: ' + error.message, 'error');
    }
  };

  const handleDeleteLink = (linkId) => {
    // Remover do estado
    const updatedLinks = generatedLinks.filter(link => link.id !== linkId);
    setGeneratedLinks(updatedLinks);

    // Remover do localStorage
    const savedLinks = JSON.parse(localStorage.getItem('generatedLinks') || '[]');
    const filteredLinks = savedLinks.filter(link => link.id !== linkId);
    localStorage.setItem('generatedLinks', JSON.stringify(filteredLinks));

    showToast('Link excluído!', 'success');
  };

  const getBadgeClass = (socialNetwork) => {
    const classes = {
      'Facebook': 'badge-facebook',
      'Instagram': 'badge-instagram',
      'YouTube': 'badge-youtube',
      'WhatsApp': 'badge-whatsapp',
      'Website': 'badge-website',
      'TV': 'badge-tv'
    };
    return `social-badge ${classes[socialNetwork] || 'badge-default'}`;
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content modal-large" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h3>Gerar Links - {promocao?.nome}</h3>
          <button className="modal-close" onClick={onClose}>
            &times;
          </button>
        </div>

        <div className="modal-body">
          {generatedLinks.length === 0 ? (
            <div className="empty-state">
              <p>Nenhum link gerado ainda.</p>
              <button
                className="btn-primary"
                onClick={autoGenerateLinksForSocialNetworks}
              >
                Gerar Links Automaticamente
              </button>
            </div>
          ) : (
            <div className="links-list">
              <div className="links-header">
                <h4>Links Gerados ({generatedLinks.length})</h4>
                <button
                  className="btn-secondary btn-small"
                  onClick={autoGenerateLinksForSocialNetworks}
                >
                  🔄 Regenerar
                </button>
              </div>

              <div className="links-table-container">
                <table className="links-table">
                  <thead>
                    <tr>
                      <th>Rede Social</th>
                      <th>Link</th>
                      <th>Data</th>
                      <th>Ações</th>
                    </tr>
                  </thead>
                  <tbody>
                    {generatedLinks.map(linkObj => (
                      <tr key={linkObj.id}>
                        <td>
                          <span className={getBadgeClass(linkObj.socialNetwork)}>
                            {linkObj.socialNetwork}
                          </span>
                        </td>
                        <td>
                          <div className="link-cell">
                            <span className="link-text" title={linkObj.link}>
                              {linkObj.link.length > 60
                                ? linkObj.link.substring(0, 60) + '...'
                                : linkObj.link}
                            </span>
                          </div>
                        </td>
                        <td>{linkObj.data}</td>
                        <td>
                          <div className="action-buttons">
                            <button
                              className="btn-icon-small"
                              onClick={() => handleCopyLink(linkObj.link)}
                              title="Copiar Link"
                            >
                              <span className="icon">📋</span>
                            </button>
                            <button
                              className="btn-icon-small"
                              onClick={() => handleShortenLink(linkObj.link)}
                              title="Encurtar Link"
                            >
                              <span className="icon">🔗</span>
                            </button>
                            <button
                              className="btn-icon-small"
                              onClick={() => handleGenerateQRCode(linkObj.link)}
                              title="Gerar QR Code"
                            >
                              <span className="icon">📱</span>
                            </button>
                            <button
                              className="btn-icon-small btn-danger"
                              onClick={() => handleDeleteLink(linkObj.id)}
                              title="Excluir"
                            >
                              <span className="icon">🗑️</span>
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </div>

        <div className="modal-footer">
          <button className="btn-secondary" onClick={onClose}>
            Fechar
          </button>
        </div>
      </div>
    </div>
  );
};

export default GenerateLinkModal;
