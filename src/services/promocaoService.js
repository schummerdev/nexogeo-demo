// src/services/promocaoService.js
import { getCurrentToken } from './authService';
import { auditHelpers, logAction, logError } from './auditService';

// Usar URL relativa para funcionar com Vercel
const API_BASE_URL = '/api';

// Fun√ß√£o para buscar todas as promo√ß√µes
export const fetchPromocoes = async () => {
  try {
    console.log('üîç Iniciando fetchPromocoes...');
    const token = getCurrentToken();
    if (!token) {
      throw new Error('Token de acesso n√£o encontrado. Fa√ßa login para continuar.');
    }
    console.log('üîë Token encontrado, fazendo requisi√ß√£o para:', `${API_BASE_URL}/?route=promocoes`);
    
    const response = await fetch(`${API_BASE_URL}/?route=promocoes`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      if (response.status === 401) {
        throw new Error('Token expirado. Fa√ßa login novamente.');
      }
      throw new Error(`Erro na requisi√ß√£o: ${response.status} ${response.statusText}`);
    }

    // Verificar se a resposta √© JSON v√°lido
    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      console.error('‚ùå Resposta n√£o √© JSON:', contentType);
      const text = await response.text();
      console.error('üìÑ Conte√∫do da resposta:', text.substring(0, 200));
      throw new Error('Servidor retornou resposta inv√°lida (HTML em vez de JSON). Verifique se a API est√° funcionando.');
    }

    const data = await response.json();
    return data.data;
  } catch (error) {
    console.error('Erro ao buscar promo√ß√µes:', error);
    throw error;
  }
};

// Fun√ß√£o para criar uma nova promo√ß√£o
export const createPromocao = async (promocaoData) => {
  try {
    const token = getCurrentToken();
    if (!token) {
      throw new Error('Token de acesso n√£o encontrado. Fa√ßa login para continuar.');
    }
    
    const response = await fetch(`${API_BASE_URL}/?route=promocoes`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(promocaoData)
    });
    
    if (!response.ok) {
      if (response.status === 401) {
        throw new Error('Token expirado. Fa√ßa login novamente.');
      }
      
      // Tentar extrair mensagem espec√≠fica do backend
      let errorMessage = `Erro na requisi√ß√£o: ${response.status}`;
      try {
        const errorData = await response.json();
        if (errorData.message) {
          errorMessage = errorData.message;
        }
      } catch (parseError) {
        // Se n√£o conseguir parsear, usar mensagem padr√£o
        errorMessage = `Erro na requisi√ß√£o: ${response.status} ${response.statusText}`;
      }
      
      throw new Error(errorMessage);
    }
    
    const data = await response.json();

    // Log de auditoria para cria√ß√£o de promo√ß√£o
    if (data.success && data.data && data.data.id) {
      auditHelpers.createPromotion(data.data.id);
      console.log('üéØ Cria√ß√£o de promo√ß√£o auditada:', data.data.id);
    }

    return data;
  } catch (error) {
    console.error('Erro ao criar promo√ß√£o:', error);
    throw error;
  }
};

// Fun√ß√£o para atualizar uma promo√ß√£o
export const updatePromocao = async (id, promocaoData) => {
  try {
    const token = getCurrentToken();
    if (!token) {
      throw new Error('Token de acesso n√£o encontrado. Fa√ßa login para continuar.');
    }

    // Buscar dados originais antes da atualiza√ß√£o para auditoria
    let originalData = null;
    try {
      const originalResponse = await fetch(`${API_BASE_URL}/?route=promocoes&id=${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      if (originalResponse.ok) {
        const originalResult = await originalResponse.json();
        originalData = originalResult.data;
      }
    } catch (error) {
      console.warn('N√£o foi poss√≠vel buscar dados originais da promo√ß√£o para auditoria:', error);
    }

    const response = await fetch(`${API_BASE_URL}/?route=promocoes&id=${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(promocaoData)
    });
    
    if (!response.ok) {
      if (response.status === 401) {
        throw new Error('Token expirado. Fa√ßa login novamente.');
      }
      
      // Tentar extrair mensagem espec√≠fica do backend
      let errorMessage = `Erro na requisi√ß√£o: ${response.status}`;
      try {
        const errorData = await response.json();
        if (errorData.message) {
          errorMessage = errorData.message;
        }
      } catch (parseError) {
        // Se n√£o conseguir parsear, usar mensagem padr√£o
        errorMessage = `Erro na requisi√ß√£o: ${response.status} ${response.statusText}`;
      }
      
      throw new Error(errorMessage);
    }

    const data = await response.json();

    // Log de auditoria para edi√ß√£o de promo√ß√£o
    if (data.success) {
      logAction('UPDATE', 'promocoes', id, {}, originalData, promocaoData);
      console.log('üéÅ Edi√ß√£o de promo√ß√£o auditada:', id);
    }

    return data;
  } catch (error) {
    console.error('Erro ao atualizar promo√ß√£o:', error);
    logError('UPDATE_PROMOTION_FAILED', 'promocaoService', error.message, { promotion_id: id });
    throw error;
  }
};

// Fun√ß√£o para excluir uma promo√ß√£o
export const deletePromocao = async (id) => {
  try {
    const token = getCurrentToken();
    if (!token) {
      throw new Error('Token de acesso n√£o encontrado. Fa√ßa login para continuar.');
    }

    // Buscar dados da promo√ß√£o antes da exclus√£o para auditoria
    let promocaoData = null;
    try {
      const promocaoResponse = await fetch(`${API_BASE_URL}/?route=promocoes&id=${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      if (promocaoResponse.ok) {
        const promocaoResult = await promocaoResponse.json();
        promocaoData = promocaoResult.data;
      }
    } catch (error) {
      console.warn('N√£o foi poss√≠vel buscar dados da promo√ß√£o para auditoria:', error);
    }

    const response = await fetch(`${API_BASE_URL}/?route=promocoes&id=${id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      if (response.status === 401) {
        throw new Error('Token expirado. Fa√ßa login novamente.');
      }
      
      // Tentar extrair mensagem espec√≠fica do backend
      let errorMessage = `Erro na requisi√ß√£o: ${response.status}`;
      try {
        const errorData = await response.json();
        if (errorData.message) {
          errorMessage = errorData.message;
        }
      } catch (parseError) {
        // Se n√£o conseguir parsear, usar mensagem padr√£o
      }
      
      throw new Error(errorMessage);
    }

    const data = await response.json();

    // Log de auditoria para exclus√£o de promo√ß√£o
    if (data.success && promocaoData) {
      logAction('DELETE', 'promocoes', id, {}, promocaoData, null);
      console.log('üóëÔ∏è Exclus√£o de promo√ß√£o auditada:', id);
    }

    return data;
  } catch (error) {
    console.error('Erro ao excluir promo√ß√£o:', error);
    logError('DELETE_PROMOTION_FAILED', 'promocaoService', error.message, { promotion_id: id });
    throw error;
  }
};

// Fun√ß√£o para buscar uma promo√ß√£o por ID
export const getPromocaoById = async (id) => {
  try {
    const token = getCurrentToken();
    if (!token) {
      throw new Error('Token de acesso n√£o encontrado. Fa√ßa login para continuar.');
    }
    
    const response = await fetch(`${API_BASE_URL}/?route=promocoes&id=${id}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      if (response.status === 401) {
        throw new Error('Token expirado. Fa√ßa login novamente.');
      }
      throw new Error(`Erro na requisi√ß√£o: ${response.status}`);
    }
    
    const data = await response.json();
    return data.data;
  } catch (error) {
    console.error('Erro ao buscar promo√ß√£o por ID:', error);
    throw error;
  }
};